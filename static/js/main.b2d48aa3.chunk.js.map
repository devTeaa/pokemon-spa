{"version":3,"sources":["components/Header.js","utils/LocalStorage.js","components/BoxPokemon.js","pages/PokemonList.js","components/TypeSpan.js","components/AbilityBox.js","components/CatchPokemon.js","pages/PokemonDetail.js","pages/MyPokemonList.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderSection","styled","section","Header","to","getMyPokemonList","JSON","parse","window","localStorage","getItem","BoxPokemonDiv","div","BoxPokemon","props","POKEMON_DETAIL","gql","pokemonIsTame","pokemon","pokemonName","useQuery","variables","name","loading","error","data","stringify","className","alt","src","sprites","front_default","PokemonListStyle","PagingButton","button","PokemonList","myPokemonListStorage","useRef","POKEMON_LIST","limit","offset","fetchMore","handlePagination","updateQuery","prevResults","fetchMoreResult","pokemons","results","map","item","current","filter","id","length","type","disabled","nextOffset","onClick","prevOffset","colours","normal","fire","water","electric","grass","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dragon","dark","steel","fairy","ElementSpan","span","css","AbilityDiv","AbilityBox","ABILITY_DESC","ability","response","effect_entries","find","language","short_effect","PokeballButton","CatchPokemon","MySwal","withReactContent","Swal","Math","random","icon","title","timer","showConfirmButton","then","text","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","preConfirm","myPokemonName","myPokemonList","indexOf","Error","removeItem","setItem","showValidationMessage","allowOutsideClick","isLoading","result","isConfirmed","PokemonDetailSection","AbilityList","ul","TypeList","MovesTable","table","currentPokemonName","useParams","moveList","moves","version_group_details","version","move_learn_method","level_learned_at","Set","move","level","version_group","sort","a","b","types","TypeSpan","abilities","join","MyPokemonListTable","MyPokemonList","useState","setMyPokemonListStorage","handleRelease","newMyPokemonListStorage","AppContainer","App","client","ApolloClient","uri","cache","InMemoryCache","ApolloProvider","path","exact","component","PokemonDetail","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2d48aa3.chunk.js","sourcesContent":["import styled from \"@emotion/styled\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst HeaderSection = styled.section`\r\n  background-color: #A82F2F;\r\n  padding: 0.5rem 1rem;\r\n\r\n  > ul {\r\n    display: flex;\r\n    flex-direcion: row;\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    \r\n    > li {\r\n      flex: 1;\r\n\r\n      &:not(:first-of-type) {\r\n        margin-left: 1rem;\r\n      }\r\n\r\n      > a {\r\n        color: white;\r\n        text-decoration: none;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst Header = () => {\r\n  return (\r\n    <HeaderSection>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Pokemon List</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/my-pokemon\">My Pokemon</Link>\r\n        </li>\r\n      </ul>\r\n    </HeaderSection>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","const getMyPokemonList = () => {\r\n  return JSON.parse(window.localStorage.getItem('myPokemonList') || '[]')\r\n}\r\n\r\nexport {\r\n  getMyPokemonList\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport {\r\n  useQuery,\r\n  gql\r\n} from \"@apollo/client\";\r\nimport styled from \"@emotion/styled\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst BoxPokemonDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n  min-height: 80px;\r\n\r\n  &.tamed:before {\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    background-image: url('/pokeball-logo.svg');\r\n    top: 0;\r\n    left: 0;\r\n    opacity: 0.6;\r\n    width: 60px;\r\n    height: 60px;\r\n  }\r\n\r\n  > img {\r\n    position: relative;\r\n    max-width: 80px;\r\n  }\r\n\r\n  > div {\r\n    padding-left: 4px;\r\n\r\n    .box-label {\r\n      font-family: Consolas;\r\n    }\r\n\r\n    a {\r\n      font-size: 0.7rem;\r\n      background-color: #38B0B8;\r\n      text-decoration: none;\r\n      padding: 2px 4px 4px 4px;\r\n    }\r\n  }\r\n\r\n  &:not(.tamed) {\r\n    .box-label {\r\n      text-transform: capitalize;\r\n    }\r\n  }\r\n`\r\n\r\nconst BoxPokemon = (props) => {\r\n  const POKEMON_DETAIL = gql`\r\n    query GetPokemonDetail($name: String!) {\r\n      pokemon(name: $name) {\r\n        id\r\n        name\r\n        sprites {\r\n          front_default\r\n        }\r\n      }\r\n    }\r\n  `\r\n\r\n  const pokemonIsTame = !!props.pokemon.pokemonName\r\n\r\n  const { loading, error, data } = useQuery(POKEMON_DETAIL, {\r\n    variables: {\r\n      name: props.pokemon.name\r\n    }\r\n  })\r\n\r\n  if (loading) return <></>\r\n  if (error) return <div>Error: {JSON.stringify(error)}</div>\r\n\r\n  return (\r\n    <BoxPokemonDiv className={\r\n      `pokemon-box ${pokemonIsTame && 'tamed'}`\r\n    }>\r\n      <img alt=\"sprite\" src={data.pokemon.sprites.front_default} />\r\n      <div>\r\n        <span className=\"box-label\">{props.pokemon.pokemonName || props.pokemon.name}</span>\r\n        <br />\r\n        <Link to={'/detail/' + props.pokemon.name}>Detail</Link>\r\n      </div>\r\n    </BoxPokemonDiv>\r\n  )\r\n}\r\n\r\nBoxPokemon.propTypes = {\r\n  pokemon: PropTypes.shape({\r\n    pokemonName: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n  })\r\n}\r\n\r\nexport default BoxPokemon\r\n","import styled from '@emotion/styled';\r\nimport {\r\n  useQuery,\r\n  gql\r\n} from \"@apollo/client\";\r\nimport { getMyPokemonList } from '../utils/LocalStorage'\r\nimport { useRef } from \"react\";\r\nimport BoxPokemon from \"../components/BoxPokemon\"\r\n\r\nconst PokemonListStyle = styled.section`\r\n  > table {\r\n    width: 100%;\r\n    border-collapse: separate;\r\n    border-spacing: 0 8px;\r\n\r\n    tbody > tr {\r\n      background: rgb(203,67,66);\r\n      background: linear-gradient(0deg, rgba(203,67,66,1) 0%, rgba(168,47,47,1) 37%, rgba(168,47,47,1) 100%);\r\n      color: white;\r\n      border-spacing: 1rem;\r\n\r\n      * {\r\n        color: #FDFDFD;\r\n      }\r\n\r\n      td > img {\r\n        max-height: 80px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .button-group {\r\n    display: flex;\r\n    margin-top: 8px;\r\n\r\n    > *:not(:first-of-type) {\r\n      margin-left: 1rem;\r\n    }\r\n\r\n    > button {\r\n      flex: 2;\r\n    }\r\n\r\n    > span {\r\n      flex: 1;\r\n      text-align: center;\r\n    }\r\n  }\r\n`\r\n\r\nconst PagingButton = styled.button`\r\n  padding: 8px 4px;\r\n  border: none;\r\n  background-color: #303030;\r\n  color: #FDFDFD;\r\n`\r\n\r\nconst PokemonList = () => {\r\n  const myPokemonListStorage = useRef(getMyPokemonList())\r\n  const checkOwned = (pokemon) => {\r\n    return myPokemonListStorage.current.filter(item => item.id === pokemon.id).length\r\n  }\r\n\r\n  const POKEMON_LIST = gql`\r\n    query GetPokemonList($limit: Int!, $offset: Int!) {\r\n      pokemons(limit: $limit, offset: $offset) {\r\n        prevOffset\r\n        nextOffset,\r\n        results {\r\n          id,\r\n          url,\r\n          name,\r\n          image,\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  const { loading, error, data, fetchMore } = useQuery(POKEMON_LIST, {\r\n    variables: {\r\n      limit: 10,\r\n      offset: 0\r\n    },\r\n  });\r\n\r\n  const handlePagination = (offset) => {\r\n    fetchMore({\r\n      variables: { offset, limit: 10 },\r\n      updateQuery: (prevResults, { fetchMoreResult }) => {\r\n        if (!fetchMoreResult) return prevResults\r\n\r\n        return fetchMoreResult\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  if (loading) return <div>Loading...</div>\r\n  if (error) return <div>Error: {error}</div>\r\n\r\n  return (\r\n    <PokemonListStyle>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Pokemon</th>\r\n            <th>Count</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {data.pokemons.results.map(item => (\r\n            <tr key={item.name}>\r\n              <td>\r\n                <BoxPokemon pokemon={item} />\r\n              </td>\r\n              <td>\r\n                (owned: {checkOwned(item)})\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"button-group\">\r\n        <PagingButton type=\"button\" disabled={data.pokemons.nextOffset === 10} onClick={() => handlePagination(data.pokemons.prevOffset)}>Previous</PagingButton>\r\n        <PagingButton type=\"button\" onClick={() => handlePagination(data.pokemons.nextOffset)}>Next</PagingButton>\r\n      </div>\r\n    </PokemonListStyle>\r\n  )\r\n}\r\n\r\nexport default PokemonList","import styled from '@emotion/styled'\r\nimport { css } from '@emotion/react'\r\n\r\nconst colours = {\r\n  normal: '#A8A77A',\r\n  fire: '#EE8130',\r\n  water: '#6390F0',\r\n  electric: '#F7D02C',\r\n  grass: '#7AC74C',\r\n  ice: '#96D9D6',\r\n  fighting: '#C22E28',\r\n  poison: '#A33EA1',\r\n  ground: '#E2BF65',\r\n  flying: '#A98FF3',\r\n  psychic: '#F95587',\r\n  bug: '#A6B91A',\r\n  rock: '#B6A136',\r\n  ghost: '#735797',\r\n  dragon: '#6F35FC',\r\n  dark: '#705746',\r\n  steel: '#B7B7CE',\r\n  fairy: '#D685AD',\r\n};\r\n\r\nconst elementStyle = props => css`\r\n  background-color: ${colours[props.type]}\r\n`\r\n\r\nconst ElementSpan = styled.span`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 2px 8px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  border-radius: 4px;\r\n  font-size: 0.75rem;\r\n  font-family: Consolas;\r\n  ${elementStyle};\r\n`\r\n\r\nexport default ElementSpan\r\n","import PropTypes from 'prop-types'\r\nimport styled from '@emotion/styled'\r\nimport {\r\n  useQuery,\r\n  gql\r\n} from '@apollo/client'\r\n\r\nconst AbilityDiv = styled.div`\r\n  border: 1px solid #303030;\r\n  background-color: #F0f0f0;\r\n  border-radius: 4px;\r\n  font-family: Consolas;\r\n  text-transform: capitalize;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  > span,\r\n  > p {\r\n    padding: 2px 4px;\r\n  }\r\n\r\n  > span {\r\n    border-bottom: 1px solid #303030;\r\n  }\r\n\r\n  > p {\r\n    margin: 0;\r\n    font-size: 0.8em;\r\n  }\r\n`\r\n\r\nconst AbilityBox = (props) => {\r\n  const ABILITY_DESC = gql`\r\n    query GetAbility($ability: String!) {\r\n      ability(ability: $ability) {\r\n        response\r\n      }\r\n    }\r\n  `\r\n\r\n  const { loading, error, data } = useQuery(ABILITY_DESC, {\r\n    variables: {\r\n      ability: props.ability.name\r\n    }\r\n  })\r\n\r\n  if (loading) return <div>Loading...</div>\r\n  if (error) return <div>Error: {JSON.stringify(error)}</div>\r\n\r\n  return (\r\n    <AbilityDiv>\r\n      <span>{props.ability.name}</span>\r\n      <p>{data.ability.response.effect_entries.find(item => item.language.name === 'en').short_effect}</p>\r\n    </AbilityDiv>\r\n  )\r\n}\r\n\r\nAbilityBox.propTypes = {\r\n  ability: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n  })\r\n}\r\n\r\nexport default AbilityBox\r\n","import PropTypes from 'prop-types'\r\nimport styled from \"@emotion/styled\"\r\n\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\n\r\nconst PokeballButton = styled.button`\r\n  display: inline-flex;\r\n  align-items: center;\r\n\r\n  > img {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst CatchPokemon = (props) => {\r\n  const MySwal = withReactContent(Swal)\r\n\r\n  const catchPokemon = () => {\r\n    if (Math.random() >= 0.5) {\r\n      MySwal.fire({\r\n        icon: 'error',\r\n        title: 'Failed to catch',\r\n        timer: 1500,\r\n        showConfirmButton: false,\r\n      })\r\n\r\n      return\r\n    }\r\n\r\n    MySwal.fire({\r\n      icon: 'success',\r\n      title: 'Pokemon has been caught',\r\n      timer: 1500,\r\n      showConfirmButton: false,\r\n    }).then(() => {\r\n      MySwal.fire({\r\n        title: 'Input pokemon name',\r\n        text: '(must be unique)',\r\n        input: 'text',\r\n        inputAttributes: {\r\n          autocapitalize: 'off'\r\n        },\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Submit',\r\n        showLoaderOnConfirm: true,\r\n        preConfirm: (myPokemonName) => {\r\n          try {\r\n            const myPokemonList = JSON.parse(window.localStorage.getItem('myPokemonList') || '[]')\r\n\r\n            if (myPokemonList.map(item => item.pokemonName).indexOf(myPokemonName) !== -1) {\r\n              throw new Error('Please choose a different name')\r\n            }\r\n\r\n            window.localStorage.removeItem('myPokemonList')\r\n            window.localStorage.setItem('myPokemonList', JSON.stringify([\r\n              ...myPokemonList,\r\n              {\r\n                pokemonName: myPokemonName,\r\n                id: props.pokemon.id,\r\n                name: props.pokemon.name,\r\n              },\r\n            ]))\r\n          } catch {\r\n            MySwal.showValidationMessage(\r\n              'Pokemon name already exist'\r\n            )\r\n          }\r\n\r\n        },\r\n        allowOutsideClick: () => !MySwal.isLoading()\r\n      }).then(result => {\r\n        if (result.isConfirmed) {\r\n          MySwal.fire({\r\n            icon: 'success',\r\n            title: 'Pokemon has been saved',\r\n          })\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <PokeballButton onClick={() => catchPokemon()}>\r\n        <img alt=\"pokeball\" src='/pokeball-logo.svg' />\r\n      </PokeballButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nCatchPokemon.propTypes = {\r\n  pokemon: {\r\n    id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n  }\r\n}\r\n\r\nexport default CatchPokemon\r\n","import { useParams } from 'react-router-dom'\r\nimport styled from '@emotion/styled'\r\n\r\nimport TypeSpan from '../components/TypeSpan'\r\nimport AbilityBox from '../components/AbilityBox'\r\n\r\nimport {\r\n  useQuery,\r\n  gql\r\n} from \"@apollo/client\";\r\n\r\nimport CatchPokemon from '../components/CatchPokemon';\r\nimport { Fragment } from 'react';\r\n\r\nconst PokemonDetailSection = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  > *:not(:first-child) {\r\n    margin-top: 1rem;\r\n  }\r\n\r\n  .pokemon-sprite {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    > img {\r\n      height: 200px;\r\n    }\r\n  }\r\n`\r\n\r\nconst AbilityList = styled.ul`\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style-type: none;\r\n\r\n  > li:not(:first-child) {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\nconst TypeList = styled.ul`\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  list-style-type: none;\r\n\r\n  > li:not(:first-of-type) {\r\n    margin-left: 0.5rem\r\n  }\r\n`;\r\n\r\nconst MovesTable = styled.table`\r\n  tr > td {\r\n    border: 1px solid #303030;\r\n    vertical-align: top;\r\n    font-size: 0.75rem;\r\n    padding: 2px 4px;\r\n\r\n    &:first-child {\r\n      white-space: nowrap;\r\n    }\r\n\r\n    .level-grid {\r\n      display: grid;\r\n      grid-template-columns: 2em auto;\r\n      grid-gap: 0.5em 0;\r\n    }\r\n  }\r\n`\r\n\r\n\r\nconst PokemonList = () => {\r\n  const currentPokemonName = useParams().name\r\n\r\n  const POKEMON_DETAIL = gql`\r\n    query GetPokemonDetail($name: String!) {\r\n      pokemon(name: $name) {\r\n        id\r\n        name\r\n        sprites {\r\n          front_default\r\n        }\r\n        abilities {\r\n         ability {\r\n           name\r\n         } \r\n        }\r\n        types {\r\n          type {\r\n            name\r\n          }\r\n        }\r\n        moves {\r\n          move {\r\n            name\r\n          }\r\n          version_group_details {\r\n            level_learned_at\r\n            move_learn_method {\r\n              name\r\n            }\r\n            version_group {\r\n              name\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `\r\n\r\n  const { loading, error, data } = useQuery(POKEMON_DETAIL, {\r\n    variables: {\r\n      name: currentPokemonName\r\n    }\r\n  })\r\n\r\n  if (loading) return <div>Loading...</div>\r\n  if (error) return <div>Error: {JSON.stringify(error)}</div>\r\n\r\n  const moveList = data.pokemon.moves\r\n    .filter(item =>\r\n      item.version_group_details.find(version =>\r\n        version.move_learn_method.name === 'egg' || version.move_learn_method.name === 'level-up'\r\n      )\r\n    )\r\n    .map(item => ({\r\n      ...item,\r\n      level_learned_at: [...new Set(item.version_group_details.map(version => version.level_learned_at))],\r\n    }))\r\n    .map(item => ({\r\n      name: item.move.name,\r\n      level_learned_at: item.level_learned_at.map(level => ({\r\n        level,\r\n        version: item.version_group_details.filter(version => version.level_learned_at === level).map(version => (version.version_group.name)),\r\n      })).sort((a, b) => a.level - b.level),\r\n    }))\r\n\r\n  return (\r\n    <PokemonDetailSection>\r\n      <span className=\"pokemon-sprite\">\r\n        <img alt=\"sprite\" src={data.pokemon.sprites.front_default} />\r\n\r\n        <TypeList>\r\n          {data.pokemon.types.map(({ type }) => (\r\n            <li key={type.name}>\r\n              <TypeSpan type={type.name}>\r\n                {type.name}\r\n              </TypeSpan>\r\n            </li>\r\n          ))}\r\n        </TypeList>\r\n      </span>\r\n\r\n      <CatchPokemon pokemon={data.pokemon} />\r\n\r\n      <AbilityList>\r\n        {data.pokemon.abilities.map(({ ability }) => (\r\n          <li key={ability.name}>\r\n            <AbilityBox ability={ability}></AbilityBox>\r\n          </li>\r\n        ))}\r\n      </AbilityList>\r\n\r\n      <MovesTable>\r\n        <thead>\r\n          <tr>\r\n            <th>Move</th>\r\n            <th>Level</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            moveList.map(item => (\r\n              <tr key={item.name}>\r\n                <td>{item.name}</td>\r\n                <td>\r\n                  <div className=\"level-grid\">\r\n                    {\r\n                      item.level_learned_at.map(level => (\r\n                        <Fragment key={`${level.level}_${level.version.join('')}`}>\r\n                          <b>{level.level}</b>\r\n                          <span>({level.version.join(', ')})</span>\r\n                        </Fragment>\r\n                      ))\r\n                    }\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          }\r\n        </tbody>\r\n      </MovesTable>\r\n    </PokemonDetailSection>\r\n  )\r\n}\r\n\r\nexport default PokemonList\r\n","import { useState } from \"react\";\r\n\r\nimport BoxPokemon from \"../components/BoxPokemon\"\r\n\r\nimport { getMyPokemonList } from '../utils/LocalStorage'\r\nimport styled from \"@emotion/styled\";\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\n\r\nconst MyPokemonListTable = styled.table`\r\n  width: 100%;\r\n  border-collapse: separate;\r\n  border-spacing: 0 8px;\r\n\r\n  tbody > tr {\r\n    background: rgb(48,216,80);\r\n    background: linear-gradient(0deg, rgba(48,216,80,1) 0%, rgba(16,168,64,1) 37%, rgba(16,168,64,1) 100%);\r\n    border-spacing: 1rem;\r\n\r\n    * {\r\n      color: #FDFDFD;\r\n    }\r\n\r\n    td {\r\n      border: none;\r\n\r\n      > button {\r\n        font-family: Consolas;\r\n        border: none;\r\n        background-color: #303030;\r\n        padding: 8px;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst MyPokemonList = () => {\r\n  const MySwal = withReactContent(Swal)\r\n  const [myPokemonListStorage, setMyPokemonListStorage] = useState(getMyPokemonList())\r\n\r\n  const handleRelease = (pokemon) => {\r\n    MySwal.fire({\r\n      icon: 'question',\r\n      text: 'Are you sure you want to release this pokemon?',\r\n      showCancelButton: true,\r\n      confirmButtonText: 'Confirm',\r\n      preConfirm: () => {\r\n        window.localStorage.removeItem('myPokemonList')\r\n\r\n        const newMyPokemonListStorage = myPokemonListStorage.filter(item => item.pokemonName !== pokemon.pokemonName)\r\n\r\n        window.localStorage.setItem('myPokemonList', JSON.stringify(newMyPokemonListStorage))\r\n        setMyPokemonListStorage(newMyPokemonListStorage)\r\n\r\n        MySwal.fire({\r\n          icon: 'success',\r\n          title: 'Pokemon has been released',\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <MyPokemonListTable>\r\n        <thead>\r\n          <tr>\r\n            <th>Pokemon</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {\r\n            myPokemonListStorage.map(item => (\r\n              <tr key={item.pokemonName}>\r\n                <td>\r\n                  <BoxPokemon pokemon={item} handleRelease={handleRelease} />\r\n                </td>\r\n                <td>\r\n                  <button type=\"button\" onClick={() => handleRelease(item)}>Release</button>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          }\r\n        </tbody>\r\n      </MyPokemonListTable>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default MyPokemonList","import { BrowserRouter as Router, Route } from 'react-router-dom'\r\n\r\nimport Header from './components/Header'\r\nimport PokemonList from './pages/PokemonList'\r\nimport PokemonDetail from './pages/PokemonDetail'\r\nimport MyPokemonList from './pages/MyPokemonList'\r\nimport styled from \"@emotion/styled\"\r\n\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n} from \"@apollo/client\";\r\n\r\nconst AppContainer = styled.div`\r\n  margin: 0 1rem 1rem 1rem;\r\n`\r\n\r\nfunction App() {\r\n  const client = new ApolloClient({\r\n    uri: 'https://graphql-pokeapi.graphcdn.app/',\r\n    cache: new InMemoryCache()\r\n  });\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <section className=\"App\">\r\n          <Header />\r\n\r\n          <AppContainer>\r\n            <Route path=\"/\" exact component={PokemonList} />\r\n            <Route path=\"/detail/:name\" component={PokemonDetail} />\r\n            <Route path=\"/my-pokemon\" component={MyPokemonList} />\r\n          </AppContainer>\r\n        </section>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}